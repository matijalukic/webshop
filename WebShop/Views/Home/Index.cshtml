@model IEnumerable<WebShop.Models.Auction>

@{
    ViewBag.Title = "Web Shop";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<SelectListItem> listStates = new List<SelectListItem>();
    listStates.Add(new SelectListItem
    {
        Text = "Ready",
        Value = "Ready",
    });
    listStates.Add(new SelectListItem
    {
        Text = "Opened",
        Value = "Opened",
        Selected = true,
    });
    listStates.Add(new SelectListItem
    {
        Text = "Closed",
        Value = "Closed",
    });
}
<div class="row">
    <div class="col-md-12 my-3">
        
        @using (Html.BeginForm("Index", "Home", FormMethod.Get, new { @class = "form-inline justify-content-between bg-light p-2 rounded-3" }))
        {

            <h3>Search:</h3>
            @Html.TextBox("name", "", new { @class ="form-control", @placeholder = "Name of the auction" })
            
            @Html.TextBox("minprice", "", new { @class="form-control", @placeholder = "Minimum tokens", @type = "number", @min="1"})
            @Html.TextBox("maxprice", "", new { @class = "form-control", @placeholder = "Maximum tokens", @type = "number", @min = "1" })

            @Html.DropDownList("status", listStates, new { @class = "form-control" })
           
            <button type="submit" class="btn btn-primary">Search</button>
        }
    </div>

</div>


<div class="row">
    @if (Model.Any())
    {
        foreach (var Auction in Model)
        {
            <div id="auction-@Auction.Id" class="auction col-md-3" closedat="@Auction.ClosedAt">
                
                <a href="@Url.Action("Auction", new { id = Auction.Id} )">
                    <h2>@Auction.Name</h2>
                    <img src="@Auction.Picture" class="img-thumbnail"/>
                </a>
                <p>
                    <span class="pricing">
                        From <span class="current-price">@Auction.CurrentPrice()</span> Tokens<br />
                    </span>
                    Price: @Auction.Price Tokens
                    <br />
                    Posted by <strong>@Auction.User.Name @Auction.User.Surname</strong>
                </p>
                <p class="text-muted">
                    Created at: @Auction.CreatedAt
                </p>
                @if (Auction.IsOpen())
                {
                    <p class="text-danger">Time left: <span class="time-left"></span></p>

                }
                else if (Auction.IsClosed())
                {
                    <p class="text-muted">Closed at: @Auction.ClosedAt.ToString()</p>
                }
                
            </div>
        }
    }
    else
    {
        <div class="alert w-100 alert-warning text-center">There is no Auctions that are matching your criteria.</div>
    }
</div>

@section scripts{
        <!--Script references. -->
<!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
<!--SignalR script to update the chat page and send messages.-->
<script>
    function updateTimeLeft() {
        $("div.auction").each(function () {
            var closingAt = $(this).attr("closedat");
            if (closingAt != undefined) {

                var auctionsEnds = new Date(closingAt);
                var differenceTimeSeconds = (auctionsEnds - new Date()) / 1000;
                if (differenceTimeSeconds > 0) {
                    var hours = Math.floor(differenceTimeSeconds / 3600);
                    var minutes = Math.floor(differenceTimeSeconds / 60) % 60;
                    var seconds = Math.floor(differenceTimeSeconds % 60);

                    // Add leading zeros
                    minutes = (minutes < 10 ? "0" : "") + minutes;
                    seconds = (seconds < 10 ? "0" : "") + seconds;
                    hours = (hours < 10 ? "0" : "") + hours;

                    // Compose the string for display
                    var currentTimeString = hours + ":" + minutes + ":" + seconds;

                    $(this).find("p .time-left").text(currentTimeString);
                }
            }
            
        });

    }
    
        $(function () {
            updateTimeLeft();
            // update time left
            setInterval(updateTimeLeft, 1000);

            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.AuctionHub;


            chat.client.UpdatePrice = function (Amount, AuctionId) {
                var updatingAuction = $("#auction-" + AuctionId);
                
                if (updatingAuction.length) {
                    updatingAuction.find("p .pricing .current-price").html(Amount);
                    updatingAuction.find(".pricing").addClass("bg-warning");
                    updatingAuction.find(".pricing").delay(3000).removeClass("bg-warning");
                }

            };

            $.connection.hub.start();
            

        });
</script>
    
    
}